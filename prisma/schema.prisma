// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role UserEnum
  contactNo String
  address String
  profileImg String
  reviewAndRatings ReviewAndRating[]
  orders Order[]

  @@map("user")
}

enum UserEnum {
  admin
  customer 
}

model Category {
  id String @id @default(uuid())
  title String
  books Book[]

  @@map("category")
}

model Book {
  id String @id @default(uuid())
  title String
  author String
  price Float
  genre String
  publicationDate DateTime 
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  reviewAndRatings ReviewAndRating[]
  orderedBooks OrderedBook[]


  @@map("book")
}

model ReviewAndRating {
  id String @id @default(uuid())
  review String
  rating String
  userId String
  user User @relation(fields: [userId], references: [id])
  bookId String
  book Book @relation(fields: [bookId], references: [id])


  @@map("reviewAndRating")
}


model Order {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  // orderedBooks Json
  status OrderStatusEnum @default(pending)
  createdAt DateTime @default(now())
  orderedBooks OrderedBook[]

  @@map("order")
}

model OrderedBook {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  bookId String
  book Book @relation(fields: [bookId], references: [id])
  quantity Int
}

enum OrderStatusEnum {
  pending
  shipped
  delivered
  
}